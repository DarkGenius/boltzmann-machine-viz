import type { MNISTSample } from '../types';

export async function loadRealMNIST(): Promise<Float32Array[]> {
  try {
    const response = await fetch('/data/mnist_2000.json');
    if (!response.ok) {
      throw new Error('Failed to load MNIST data');
    }
    
    const mnistData: MNISTSample[] = await response.json();
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Float32Array (–¥–∞–Ω–Ω—ã–µ —É–∂–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω—ã –≤ [0, 1])
    const processedData = mnistData.map(sample => new Float32Array(sample.pixels));
    
    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if (processedData.length > 0) {
      const firstSample = processedData[0];
      const nonZeroPixels = Array.from(firstSample).filter(p => p > 0).length;
      const maxValue = Math.max(...Array.from(firstSample));
      const minValue = Math.min(...Array.from(firstSample));
      
      console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${processedData.length} —Ä–µ–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–∑—Ü–æ–≤ MNIST`);
      console.log(`üìä –ü–µ—Ä–≤—ã–π –æ–±—Ä–∞–∑–µ—Ü: ${nonZeroPixels}/784 –Ω–µ–Ω—É–ª–µ–≤—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π, –¥–∏–∞–ø–∞–∑–æ–Ω [${minValue.toFixed(3)}, ${maxValue.toFixed(3)}]`);
    }
    
    return processedData;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ MNIST –¥–∞–Ω–Ω—ã—Ö:', error);
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ MNIST. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.');
  }
}

export function getMNISTLabels(): Promise<number[]> {
  return fetch('/data/mnist_2000.json')
    .then(response => response.json())
    .then((data: MNISTSample[]) => data.map(sample => sample.label))
    .catch(() => {
      console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ—Ç–∫–∏ MNIST');
      return [];
    });
}