import type { RBMParams, ReconstructionResult, TrainingMethod } from '../types';

export class BernoulliRBM {
  private nVisible: number;
  private nHidden: number;
  private learningRate: number;
  private batchSize: number;
  private trainingMethod: TrainingMethod;
  private weights: Float32Array[];
  private hiddenBias: Float32Array;
  private visibleBias: Float32Array;

  constructor({ nVisible, nHidden, learningRate = 0.06, batchSize = 32, trainingMethod = 'contrastive-divergence' }: RBMParams) {
    this.nVisible = nVisible;
    this.nHidden = nHidden;
    this.learningRate = learningRate;
    this.batchSize = batchSize;
    this.trainingMethod = trainingMethod;

    this.weights = this.randomMatrix(nHidden, nVisible, 0.01);
    this.hiddenBias = new Float32Array(nHidden);
    this.visibleBias = new Float32Array(nVisible);
  }

  private randomMatrix(rows: number, cols: number, scale: number): Float32Array[] {
    const matrix: Float32Array[] = [];
    for (let i = 0; i < rows; i++) {
      matrix[i] = new Float32Array(cols);
      for (let j = 0; j < cols; j++) {
        matrix[i][j] = (Math.random() - 0.5) * 2 * scale;
      }
    }
    return matrix;
  }

  private sigmoid(x: number): number {
    return 1 / (1 + Math.exp(-x));
  }

  // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ —Å–∏—Å—Ç–µ–º—ã (—Ñ—É–Ω–∫—Ü–∏—è –õ—è–ø—É–Ω–æ–≤–∞)
  private computeEnergy(visible: Float32Array, hidden: Float32Array): number {
    let energy = 0;
    
    // –ß–ª–µ–Ω —Å–º–µ—â–µ–Ω–∏—è –≤–∏–¥–∏–º–æ–≥–æ —Å–ª–æ—è
    for (let i = 0; i < this.nVisible; i++) {
      energy -= this.visibleBias[i] * visible[i];
    }
    
    // –ß–ª–µ–Ω —Å–º–µ—â–µ–Ω–∏—è —Å–∫—Ä—ã—Ç–æ–≥–æ —Å–ª–æ—è
    for (let j = 0; j < this.nHidden; j++) {
      energy -= this.hiddenBias[j] * hidden[j];
    }
    
    // –ß–ª–µ–Ω –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –º–µ–∂–¥—É —Å–ª–æ—è–º–∏
    for (let i = 0; i < this.nVisible; i++) {
      for (let j = 0; j < this.nHidden; j++) {
        energy -= this.weights[j][i] * visible[i] * hidden[j];
      }
    }
    
    return energy;
  }

  /**
   * –í—ã–±–æ—Ä–∫–∞ –ì–∏–±–±—Å–∞ - –æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤ RBM
   * –ß–µ—Ä–µ–¥—É–µ—Ç –≤—ã–±–æ—Ä–∫—É –≤–∏–¥–∏–º–æ–≥–æ –∏ —Å–∫—Ä—ã—Ç–æ–≥–æ —Å–ª–æ–µ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—Ä–∞–∑—Ü–æ–≤ –∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
   */
  private gibbsSample(visible: Float32Array, steps: number = 1): { visible: Float32Array, hidden: Float32Array } {
    let currentVisible = visible.slice();
    let currentHidden = new Float32Array(this.nHidden);
    
    for (let step = 0; step < steps; step++) {
      // –®–∞–≥ 1: –í—ã–±–æ—Ä–∫–∞ —Å–∫—Ä—ã—Ç–æ–≥–æ —Å–ª–æ—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∏–¥–∏–º–æ–≥–æ
      currentHidden = this.sampleHiddenBinary(currentVisible);
      
      // –®–∞–≥ 2: –í—ã–±–æ—Ä–∫–∞ –≤–∏–¥–∏–º–æ–≥–æ —Å–ª–æ—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∫—Ä—ã—Ç–æ–≥–æ
      currentVisible = this.sampleVisibleBinary(currentHidden);
    }
    
    return { visible: currentVisible, hidden: currentHidden };
  }
  
  /**
   * –ë–∏–Ω–∞—Ä–Ω–∞—è –≤—ã–±–æ—Ä–∫–∞ —Å–∫—Ä—ã—Ç–æ–≥–æ —Å–ª–æ—è (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ –ì–∏–±–±—Å–∞)
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∏–Ω–∞—Ä–Ω—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤–º–µ—Å—Ç–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
   */
  private sampleHiddenBinary(visible: Float32Array): Float32Array {
    const hidden = new Float32Array(this.nHidden);
    for (let i = 0; i < this.nHidden; i++) {
      let activation = this.hiddenBias[i];
      for (let j = 0; j < this.nVisible; j++) {
        activation += visible[j] * this.weights[i][j];
      }
      const prob = this.sigmoid(activation);
      // –ë–∏–Ω–∞—Ä–Ω–∞—è –≤—ã–±–æ—Ä–∫–∞: 1 —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é prob, 0 –∏–Ω–∞—á–µ
      hidden[i] = Math.random() < prob ? 1 : 0;
    }
    return hidden;
  }
  
  /**
   * –ë–∏–Ω–∞—Ä–Ω–∞—è –≤—ã–±–æ—Ä–∫–∞ –≤–∏–¥–∏–º–æ–≥–æ —Å–ª–æ—è (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ –ì–∏–±–±—Å–∞)
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–∏–Ω–∞—Ä–Ω—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤–º–µ—Å—Ç–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
   */
  private sampleVisibleBinary(hidden: Float32Array): Float32Array {
    const visible = new Float32Array(this.nVisible);
    for (let i = 0; i < this.nVisible; i++) {
      let activation = this.visibleBias[i];
      for (let j = 0; j < this.nHidden; j++) {
        activation += hidden[j] * this.weights[j][i];
      }
      const prob = this.sigmoid(activation);
      // –ë–∏–Ω–∞—Ä–Ω–∞—è –≤—ã–±–æ—Ä–∫–∞: 1 —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é prob, 0 –∏–Ω–∞—á–µ
      visible[i] = Math.random() < prob ? 1 : 0;
    }
    return visible;
  }

  /**
   * –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –∏–º–∏—Ç–∞—Ü–∏–∏ –æ—Ç–∂–∏–≥–∞ —Å –±–∞–∑–æ–≤—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º –ú–µ—Ç—Ä–æ–ø–æ–ª–∏—Å–∞-–ì–∞—Å—Ç–∏–Ω–≥—Å–∞
   * –§–æ–∫—É—Å –Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–∏–Ω—è—Ç–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
   */
  private simulatedAnnealing(data: Float32Array[]): void {
    console.log('üî• –ù–∞—á–∏–Ω–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –∏–º–∏—Ç–∞—Ü–∏—é –æ—Ç–∂–∏–≥–∞...');
    
    // –ü—Ä–æ—Å—Ç—ã–µ –∏ —Å—Ç–∞–±–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    const initialTemperature = 2.0;
    const finalTemperature = 0.1;
    const coolingRate = 0.99;
    const stepsPerTemperature = 50;
    
    let temperature = initialTemperature;
    let totalIterations = 0;
    let acceptedMoves = 0;
    let energyDecreases = 0;
    
    // –ù–∞—á–∏–Ω–∞–µ–º —Å —Å–ª—É—á–∞–π–Ω–æ–≥–æ –æ–±—Ä–∞–∑—Ü–∞
    let currentSample = data[Math.floor(Math.random() * data.length)].slice();
    let currentHidden = this.sampleHiddenBinary(currentSample);
    let currentEnergy = this.computeEnergy(currentSample, currentHidden);
    
    console.log(`üéØ –ù–∞—á–∞–ª—å–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è: ${currentEnergy.toFixed(4)}, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${temperature.toFixed(4)}`);
    
    while (temperature > finalTemperature) {
      let tempAccepted = 0;
      
      for (let step = 0; step < stepsPerTemperature; step++) {
        totalIterations++;
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –¥–µ–ª–∞–µ–º –Ω–µ–±–æ–ª—å—à–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫ —Ç–µ–∫—É—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
        const proposedSample = currentSample.slice();
        const proposedHidden = currentHidden.slice();
        
        // –ò–∑–º–µ–Ω—è–µ–º —Å–ª—É—á–∞–π–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –Ω–µ–π—Ä–æ–Ω—ã (–º–µ–Ω—å—à–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π = –≤—ã—à–µ –ø—Ä–∏–Ω—è—Ç–∏–µ)
        const neuronsToFlip = Math.min(3, this.nHidden); // –ú–∞–∫—Å–∏–º—É–º 3 –Ω–µ–π—Ä–æ–Ω–∞
        for (let flip = 0; flip < neuronsToFlip; flip++) {
          const neuronIdx = Math.floor(Math.random() * this.nHidden);
          proposedHidden[neuronIdx] = proposedHidden[neuronIdx] > 0.5 ? 0 : 1;
        }
        
        // –ü–µ—Ä–µ–≤—ã—á–∏—Å–ª—è–µ–º –≤–∏–¥–∏–º—ã–π —Å–ª–æ–π –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–∫—Ä—ã—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        for (let i = 0; i < this.nVisible; i++) {
          let activation = this.visibleBias[i];
          for (let j = 0; j < this.nHidden; j++) {
            activation += proposedHidden[j] * this.weights[j][i];
          }
          const prob = this.sigmoid(activation);
          proposedSample[i] = Math.random() < prob ? 1 : 0;
        }
        
        const proposedEnergy = this.computeEnergy(proposedSample, proposedHidden);
        const energyDiff = proposedEnergy - currentEnergy;
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —ç–Ω–µ—Ä–≥–∏–π
        if (!isFinite(currentEnergy) || !isFinite(proposedEnergy)) {
          console.error(`‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è –Ω–∞ –∏—Ç–µ—Ä–∞—Ü–∏–∏ ${totalIterations}`);
          continue;
        }
        
        // –û—Ç–ª–∞–¥–∫–∞ –¥–ª—è –ø–µ—Ä–≤—ã—Ö –∏—Ç–µ—Ä–∞—Ü–∏–π
        if (totalIterations <= 10) {
          console.log(`üîç –ò—Ç–µ—Ä–∞—Ü–∏—è ${totalIterations}: E=${currentEnergy.toFixed(4)} ‚Üí ${proposedEnergy.toFixed(4)}, ŒîE=${energyDiff.toFixed(4)}`);
        }
        
        // –ö—Ä–∏—Ç–µ—Ä–∏–π –ú–µ—Ç—Ä–æ–ø–æ–ª–∏—Å–∞: –ø—Ä–∏–Ω–∏–º–∞–µ–º –µ—Å–ª–∏ —ç–Ω–µ—Ä–≥–∏—è —É–º–µ–Ω—å—à–∏–ª–∞—Å—å –ò–õ–ò —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é exp(-ŒîE/T)
        let shouldAccept = false;
        if (energyDiff <= 0) {
          shouldAccept = true; // –í—Å–µ–≥–¥–∞ –ø—Ä–∏–Ω–∏–º–∞–µ–º —É–ª—É—á—à–µ–Ω–∏—è
        } else {
          const acceptProbability = Math.exp(-energyDiff / temperature);
          shouldAccept = Math.random() < acceptProbability;
          
          if (totalIterations <= 10) {
            console.log(`üé≤ P(accept)=${(acceptProbability * 100).toFixed(1)}%, –ø—Ä–∏–Ω—è—Ç: ${shouldAccept ? '–î–∞' : '–ù–µ—Ç'}`);
          }
        }
        
        if (shouldAccept) {
          acceptedMoves++;
          tempAccepted++;
          
          if (energyDiff < 0) {
            energyDecreases++;
          }
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
          currentSample = proposedSample;
          currentHidden = proposedHidden;
          currentEnergy = proposedEnergy;
          
          // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Å–æ–≤ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
          if (acceptedMoves % 10 === 0) {
            const dataIdx = Math.floor(Math.random() * data.length);
            const dataSample = data[dataIdx];
            const dataHidden = this.sampleHidden(dataSample);
            
            const lr = this.learningRate * 0.01; // –û–ß–ï–ù–¨ –º–∞–ª–µ–Ω—å–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è
            
            // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
            let totalWeightMagnitude = 0;
            let maxWeight = -Infinity;
            let minWeight = Infinity;
            
            for (let i = 0; i < this.nVisible; i++) {
              for (let j = 0; j < this.nHidden; j++) {
                const w = this.weights[j][i];
                totalWeightMagnitude += Math.abs(w);
                maxWeight = Math.max(maxWeight, w);
                minWeight = Math.min(minWeight, w);
              }
            }
            
            console.log(`üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Å–æ–≤ #${Math.floor(acceptedMoves / 10)}:`);
            console.log(`   –í–µ—Å–∞ –¥–æ: —Å—Ä–µ–¥–Ω–µ–µ=${(totalWeightMagnitude / (this.nVisible * this.nHidden)).toFixed(4)}, –º–∏–Ω=${minWeight.toFixed(4)}, –º–∞–∫—Å=${maxWeight.toFixed(4)}`);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Å–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º
            let totalUpdate = 0;
            let maxUpdate = 0;
            
            for (let i = 0; i < this.nVisible; i++) {
              for (let j = 0; j < this.nHidden; j++) {
                const dataCorr = dataSample[i] * dataHidden[j];
                const modelCorr = currentSample[i] * currentHidden[j];
                const update = lr * (dataCorr - modelCorr);
                
                // –ö–†–ò–¢–ò–ß–ù–û: –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                const clampedUpdate = Math.max(-0.01, Math.min(0.01, update));
                this.weights[j][i] += clampedUpdate;
                
                // –ö–†–ò–¢–ò–ß–ù–û: –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –≤–µ—Å–æ–≤
                this.weights[j][i] = Math.max(-2.0, Math.min(2.0, this.weights[j][i]));
                
                totalUpdate += Math.abs(clampedUpdate);
                maxUpdate = Math.max(maxUpdate, Math.abs(clampedUpdate));
              }
              
              const biasUpdate = lr * (dataSample[i] - currentSample[i]);
              const clampedBiasUpdate = Math.max(-0.01, Math.min(0.01, biasUpdate));
              this.visibleBias[i] += clampedBiasUpdate;
              this.visibleBias[i] = Math.max(-1.0, Math.min(1.0, this.visibleBias[i]));
            }
            
            for (let j = 0; j < this.nHidden; j++) {
              const biasUpdate = lr * (dataHidden[j] - currentHidden[j]);
              const clampedBiasUpdate = Math.max(-0.01, Math.min(0.01, biasUpdate));
              this.hiddenBias[j] += clampedBiasUpdate;
              this.hiddenBias[j] = Math.max(-1.0, Math.min(1.0, this.hiddenBias[j]));
            }
            
            // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            totalWeightMagnitude = 0;
            maxWeight = -Infinity;
            minWeight = Infinity;
            
            for (let i = 0; i < this.nVisible; i++) {
              for (let j = 0; j < this.nHidden; j++) {
                const w = this.weights[j][i];
                totalWeightMagnitude += Math.abs(w);
                maxWeight = Math.max(maxWeight, w);
                minWeight = Math.min(minWeight, w);
              }
            }
            
            console.log(`   –í–µ—Å–∞ –ø–æ—Å–ª–µ: —Å—Ä–µ–¥–Ω–µ–µ=${(totalWeightMagnitude / (this.nVisible * this.nHidden)).toFixed(4)}, –º–∏–Ω=${minWeight.toFixed(4)}, –º–∞–∫—Å=${maxWeight.toFixed(4)}`);
            console.log(`   –†–∞–∑–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: —Å—Ä–µ–¥–Ω–µ–µ=${(totalUpdate / (this.nVisible * this.nHidden)).toFixed(6)}, –º–∞–∫—Å=${maxUpdate.toFixed(6)}`);
            
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º —ç–Ω–µ—Ä–≥–∏—é –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            const testEnergy = this.computeEnergy(currentSample, currentHidden);
            console.log(`   –≠–Ω–µ—Ä–≥–∏—è –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Å–æ–≤: ${currentEnergy.toFixed(4)} ‚Üí ${testEnergy.toFixed(4)} (–∏–∑–º–µ–Ω–µ–Ω–∏–µ: ${(testEnergy - currentEnergy).toFixed(4)})`);
            currentEnergy = testEnergy; // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —ç–Ω–µ—Ä–≥–∏—é
          }
        }
      }
      
      // –û—Ö–ª–∞–∂–¥–µ–Ω–∏–µ
      temperature *= coolingRate;
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–∂–¥—É—é —Ç—ã—Å—è—á—É –∏—Ç–µ—Ä–∞—Ü–∏–π
      if (totalIterations % 1000 === 0) {
        const overallAcceptanceRate = (acceptedMoves / totalIterations * 100).toFixed(1);
        const tempAcceptanceRate = (tempAccepted / stepsPerTemperature * 100).toFixed(1);
        console.log(`üå°Ô∏è –ò—Ç–µ—Ä–∞—Ü–∏—è ${totalIterations}, T=${temperature.toFixed(3)}, –ø—Ä–∏–Ω—è—Ç–æ: ${overallAcceptanceRate}% (–ø–æ—Å–ª–µ–¥–Ω–∏–µ ${tempAcceptanceRate}%)`);
        console.log(`‚ö° –¢–µ–∫—É—â–∞—è —ç–Ω–µ—Ä–≥–∏—è: ${currentEnergy.toFixed(4)}`);
      }
    }
    
    // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const finalAcceptanceRate = (acceptedMoves / totalIterations * 100).toFixed(1);
    const improvementRate = acceptedMoves > 0 ? (energyDecreases / acceptedMoves * 100).toFixed(1) : '0';
    
    console.log(`‚ùÑÔ∏è –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–∂–∏–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${totalIterations} –∏—Ç–µ—Ä–∞—Ü–∏–π`);
    console.log(`üìä –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–Ω—è—Ç–∏—è: ${finalAcceptanceRate}%`);
    console.log(`üìà –ò–∑ –ø—Ä–∏–Ω—è—Ç—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π, —É–ª—É—á—à–µ–Ω–∏–π: ${improvementRate}%`);
    console.log(`‚ö° –§–∏–Ω–∞–ª—å–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è: ${currentEnergy.toFixed(4)}`);
    console.log(`üéØ –û–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤–µ—Å–æ–≤: ${Math.floor(acceptedMoves / 10)}`);
  }

  private sampleHidden(visible: Float32Array): Float32Array {
    const hidden = new Float32Array(this.nHidden);
    for (let i = 0; i < this.nHidden; i++) {
      let activation = this.hiddenBias[i];
      for (let j = 0; j < this.nVisible; j++) {
        activation += visible[j] * this.weights[i][j];
      }
      hidden[i] = this.sigmoid(activation);
    }
    return hidden;
  }

  private sampleVisible(hidden: Float32Array): Float32Array {
    const visible = new Float32Array(this.nVisible);
    for (let i = 0; i < this.nVisible; i++) {
      let activation = this.visibleBias[i];
      for (let j = 0; j < this.nHidden; j++) {
        activation += hidden[j] * this.weights[j][i];
      }
      visible[i] = this.sigmoid(activation);
    }
    return visible;
  }

  private contrastiveDivergence(batch: Float32Array[]): void {
    const batchSize = batch.length;
    
    const weightGrad = this.randomMatrix(this.nHidden, this.nVisible, 0);
    const hiddenGrad = new Float32Array(this.nHidden);
    const visibleGrad = new Float32Array(this.nVisible);

    for (const sample of batch) {
      const hiddenProb = this.sampleHidden(sample);
      const visibleRecon = this.sampleVisible(hiddenProb);
      const hiddenRecon = this.sampleHidden(visibleRecon);

      for (let i = 0; i < this.nHidden; i++) {
        for (let j = 0; j < this.nVisible; j++) {
          weightGrad[i][j] += (hiddenProb[i] * sample[j] - hiddenRecon[i] * visibleRecon[j]) / batchSize;
        }
        hiddenGrad[i] += (hiddenProb[i] - hiddenRecon[i]) / batchSize;
      }

      for (let i = 0; i < this.nVisible; i++) {
        visibleGrad[i] += (sample[i] - visibleRecon[i]) / batchSize;
      }
    }

    for (let i = 0; i < this.nHidden; i++) {
      for (let j = 0; j < this.nVisible; j++) {
        this.weights[i][j] += this.learningRate * weightGrad[i][j];
      }
      this.hiddenBias[i] += this.learningRate * hiddenGrad[i];
    }

    for (let i = 0; i < this.nVisible; i++) {
      this.visibleBias[i] += this.learningRate * visibleGrad[i];
    }
  }

  async fit(
    data: Float32Array[], 
    nEpochs = 15, 
    progressCallback?: (epoch: number, totalEpochs: number) => void
  ): Promise<void> {
    console.log(`üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–º: ${this.trainingMethod}`);
    
    if (this.trainingMethod === 'simulated-annealing') {
      console.log('‚ùÑÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–∏—Ç–∞—Ü–∏—é –æ—Ç–∂–∏–≥–∞');
      // –î–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –æ—Ç–∂–∏–≥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–Ω—å—à–µ –¥–∞–Ω–Ω—ã—Ö, –Ω–æ –±–æ–ª—å—à–µ —ç–ø–æ—Ö
      const reducedData = data.slice(0, Math.min(10, data.length));
      const reducedEpochs = Math.min(25, nEpochs); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–æ—Ö
      console.log(`üìä –î–∞–Ω–Ω—ã–µ: ${reducedData.length} –æ–±—Ä–∞–∑—Ü–æ–≤, —ç–ø–æ—Ö: ${reducedEpochs}`);
      
      for (let epoch = 0; epoch < reducedEpochs; epoch++) {
        if (progressCallback) {
          progressCallback(epoch + 1, reducedEpochs);
        }
        
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è
        if (epoch > 0 && epoch % 5 === 0) {
          console.log(`üìà –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è: —ç–ø–æ—Ö–∞ ${epoch}/${reducedEpochs}`);
        }
        
        this.simulatedAnnealing(reducedData);
        
        // –ü–∞—É–∑–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
        await new Promise(resolve => setTimeout(resolve, 100));
      }
    } else {
      console.log('‚ö° –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∏–≤–Ω—É—é –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—é');
      // –ö–æ–Ω—Ç—Ä–∞—Å—Ç–∏–≤–Ω–∞—è –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥)
      const nSamples = data.length;
      const nBatches = Math.floor(nSamples / this.batchSize);
      console.log(`üìä –î–∞–Ω–Ω—ã–µ: ${nSamples} –æ–±—Ä–∞–∑—Ü–æ–≤, –±–∞—Ç—á–µ–π: ${nBatches}, —ç–ø–æ—Ö: ${nEpochs}`);

      for (let epoch = 0; epoch < nEpochs; epoch++) {
        const indices = Array.from({ length: nSamples }, (_, i) => i);
        for (let i = indices.length - 1; i > 0; i--) {
          const j = Math.floor(Math.random() * (i + 1));
          [indices[i], indices[j]] = [indices[j], indices[i]];
        }

        for (let batchIdx = 0; batchIdx < nBatches; batchIdx++) {
          const batch: Float32Array[] = [];
          for (let i = 0; i < this.batchSize; i++) {
            const idx = indices[batchIdx * this.batchSize + i];
            batch.push(data[idx]);
          }
          this.contrastiveDivergence(batch);
          
          if (batchIdx % 5 === 0) {
            await new Promise(resolve => setTimeout(resolve, 0));
          }
        }

        if (progressCallback) {
          progressCallback(epoch + 1, nEpochs);
        }
        
        await new Promise(resolve => setTimeout(resolve, 10));
      }
    }
  }

  reconstruct(sample: Float32Array): ReconstructionResult {
    const hidden = this.sampleHidden(sample);
    const reconstruction = this.sampleVisible(hidden);
    return { reconstruction, hidden };
  }

  saveToLocalStorage(): boolean {
    const data = {
      nVisible: this.nVisible,
      nHidden: this.nHidden,
      weights: this.weights.map(row => Array.from(row)),
      hiddenBias: Array.from(this.hiddenBias),
      visibleBias: Array.from(this.visibleBias),
      trainingMethod: this.trainingMethod,
      timestamp: Date.now()
    };
    
    try {
      const compressed = JSON.stringify(data);
      localStorage.setItem('rbm_weights', compressed);
      console.log('‚úÖ –í–µ—Å–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Local Storage');
      return true;
    } catch (e) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–µ—Å–æ–≤:', e);
      return false;
    }
  }

  static loadFromLocalStorage(): BernoulliRBM | null {
    try {
      const compressed = localStorage.getItem('rbm_weights');
      if (!compressed) return null;
      
      const data = JSON.parse(compressed);
      const rbm = new BernoulliRBM({
        nVisible: data.nVisible,
        nHidden: data.nHidden,
        learningRate: 0.06,
        batchSize: 32,
        trainingMethod: data.trainingMethod || 'contrastive-divergence'
      });
      
      rbm.weights = data.weights.map((row: number[]) => new Float32Array(row));
      rbm.hiddenBias = new Float32Array(data.hiddenBias);
      rbm.visibleBias = new Float32Array(data.visibleBias);
      
      console.log('‚úÖ –í–µ—Å–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ Local Storage');
      return rbm;
    } catch (e) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–µ—Å–æ–≤:', e);
      return null;
    }
  }

  getWeights(): Float32Array[] {
    return this.weights;
  }

  getHiddenBias(): Float32Array {
    return this.hiddenBias;
  }

  getVisibleBias(): Float32Array {
    return this.visibleBias;
  }

  getTrainingMethod(): TrainingMethod {
    return this.trainingMethod;
  }
}