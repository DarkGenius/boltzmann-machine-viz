import { useEffect, useRef, useState } from 'react';
import { BernoulliRBM } from '../ml/BernoulliRBM';
import { drawImage } from '../utils/canvas';
import { calculateErrorMetrics, getMSECategory } from '../utils/metrics';
import { ErrorStats } from './ErrorStats';
import { NeuronAnalysis } from './NeuronAnalysis';

interface SampleVisualizationProps {
  rbm: BernoulliRBM;
  data: Float32Array[];
}

export function SampleVisualization({ rbm, data }: SampleVisualizationProps) {
  const [sampleIndex, setSampleIndex] = useState(0);
  const [currentSample, setCurrentSample] = useState<Float32Array | null>(null);
  const [reconstruction, setReconstruction] = useState<Float32Array | null>(null);
  const [hiddenActivations, setHiddenActivations] = useState<Float32Array | null>(null);
  
  const originalCanvasRef = useRef<HTMLCanvasElement>(null);
  const reconstructionCanvasRef = useRef<HTMLCanvasElement>(null);
  const hiddenCanvasRef = useRef<HTMLCanvasElement>(null);

  useEffect(() => {
    if (!rbm || !data) return;

    const sample = data[sampleIndex];
    const result = rbm.reconstruct(sample);
    
    setCurrentSample(sample);
    setReconstruction(result.reconstruction);
    setHiddenActivations(result.hidden);

    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –Ω–∞ –∫–∞–Ω–≤–∞—Å–∞—Ö
    if (originalCanvasRef.current) {
      drawImage(originalCanvasRef.current, sample, 28, 28);
    }
    if (reconstructionCanvasRef.current) {
      drawImage(reconstructionCanvasRef.current, result.reconstruction, 28, 28);
    }
    if (hiddenCanvasRef.current) {
      drawImage(hiddenCanvasRef.current, result.hidden, 8, 8);
    }
  }, [rbm, data, sampleIndex]);

  const handleSliderChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSampleIndex(parseInt(e.target.value));
  };

  const errorMetrics = currentSample && reconstruction 
    ? calculateErrorMetrics(currentSample, reconstruction)
    : null;

  const mseCategory = errorMetrics 
    ? getMSECategory(parseFloat(errorMetrics.mse))
    : null;

  return (
    <div className="visualization active">
      <div className="slider-container">
        <div className="slider-label">
          –ò–Ω–¥–µ–∫—Å –æ–±—Ä–∞–∑—Ü–∞: <span>{sampleIndex}</span>
        </div>
        <input
          type="range"
          min="0"
          max={data.length - 1}
          value={sampleIndex}
          onChange={handleSliderChange}
        />
      </div>

      <div className="viz-panels">
        <div className="viz-panel">
          <div className="viz-title">–û—Ä–∏–≥–∏–Ω–∞–ª</div>
          <canvas
            ref={originalCanvasRef}
            width="256"
            height="256"
          />
        </div>

        <div className="viz-panel">
          <div className="viz-title">–†–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</div>
          <canvas
            ref={reconstructionCanvasRef}
            width="256"
            height="256"
          />
          {errorMetrics && (
            <ErrorStats 
              metrics={errorMetrics}
              category={mseCategory}
            />
          )}
        </div>

        <div className="viz-panel">
          <div className="viz-title">–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–∫—Ä—ã—Ç—ã—Ö –Ω–µ–π—Ä–æ–Ω–æ–≤</div>
          <canvas
            ref={hiddenCanvasRef}
            width="256"
            height="256"
          />
          <div className="hidden-neurons-explanation">
            <p>üí° <strong>–ö–∞–∫ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å:</strong></p>
            <ul>
              <li>–ö–∞–∂–¥—ã–π –∫–≤–∞–¥—Ä–∞—Ç ‚Äî –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ —Å–∫—Ä—ã—Ç–æ–≥–æ –Ω–µ–π—Ä–æ–Ω–∞</li>
              <li>–°–≤–µ—Ç–ª—ã–µ –∫–≤–∞–¥—Ä–∞—Ç—ã ‚Äî –Ω–µ–π—Ä–æ–Ω—ã —Å –≤—ã—Å–æ–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é</li>
              <li>–¢–µ–º–Ω—ã–µ –∫–≤–∞–¥—Ä–∞—Ç—ã ‚Äî –Ω–µ–π—Ä–æ–Ω—ã —Å –Ω–∏–∑–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é</li>
              <li>–ü–∞—Ç—Ç–µ—Ä–Ω –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ "—É–≤–∏–¥–µ–ª–∞" —Å–µ—Ç—å –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏</li>
            </ul>
          </div>
        </div>
      </div>

      {currentSample && hiddenActivations && (
        <NeuronAnalysis 
          rbm={rbm}
          sample={currentSample}
          hiddenActivations={hiddenActivations}
        />
      )}
    </div>
  );
}