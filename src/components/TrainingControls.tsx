import { useState, useEffect } from 'react';
import type { TrainingProgress, DataSource, TrainingMethod } from '../types';
import { ProgressBar } from './ProgressBar';

interface TrainingControlsProps {
  onTrain: () => void;
  onLoadSaved: () => void;
  onSaveWeightsToggle: (enabled: boolean) => void;
  onDataSourceToggle: (dataSource: DataSource) => void;
  onTrainingMethodChange: (method: TrainingMethod) => void;
  isTraining: boolean;
  trainingProgress: TrainingProgress | null;
}

export function TrainingControls({
  onTrain,
  onLoadSaved,
  onSaveWeightsToggle,
  onDataSourceToggle,
  onTrainingMethodChange,
  isTraining,
  trainingProgress
}: TrainingControlsProps) {
  const [saveWeights, setSaveWeights] = useState(true);
  const [useRealMNIST, setUseRealMNIST] = useState(false);
  const [trainingMethod, setTrainingMethod] = useState<TrainingMethod>('contrastive-divergence');
  const [hasSavedWeights, setHasSavedWeights] = useState(false);

  useEffect(() => {
    const saved = localStorage.getItem('rbm_weights');
    setHasSavedWeights(!!saved);
  }, []);

  useEffect(() => {
    localStorage.setItem('rbm_save_weights', saveWeights.toString());
    onSaveWeightsToggle(saveWeights);
  }, [saveWeights, onSaveWeightsToggle]);

  useEffect(() => {
    onDataSourceToggle(useRealMNIST ? 'mnist' : 'generated');
  }, [useRealMNIST, onDataSourceToggle]);

  useEffect(() => {
    onTrainingMethodChange(trainingMethod);
  }, [trainingMethod, onTrainingMethodChange]);

  const handleSaveWeightsChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSaveWeights(e.target.checked);
  };

  const handleDataSourceChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setUseRealMNIST(e.target.checked);
  };

  const handleTrainingMethodChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    setTrainingMethod(e.target.value as TrainingMethod);
  };

  const handleDeleteWeights = () => {
    localStorage.removeItem('rbm_weights');
    setHasSavedWeights(false);
  };

  return (
    <div className="controls">
      <div className="control-section">
        <div className="section-header">üöÄ –î–µ–π—Å—Ç–≤–∏—è</div>
        <div className="action-buttons">
          <button 
            onClick={onTrain}
            disabled={isTraining}
            className="train-btn"
          >
            {isTraining ? '–û–±—É—á–µ–Ω–∏–µ...' : '–û–±—É—á–∏—Ç—å —Å–µ—Ç—å'}
          </button>

          {hasSavedWeights && !isTraining && (
            <>
              <button 
                onClick={onLoadSaved}
                className="train-btn load-btn"
              >
                –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤–µ—Å–∞
              </button>
              <button 
                onClick={handleDeleteWeights}
                className="train-btn delete-btn"
              >
                üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤–µ—Å–∞
              </button>
            </>
          )}
        </div>
      </div>
      
      <div className="control-section">
        <div className="section-header">‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏</div>
        <div className="settings-group">
          <div className="setting-item">
            <label className="setting-label">–ú–µ—Ç–æ–¥ –æ–±—É—á–µ–Ω–∏—è:</label>
            <select
              value={trainingMethod}
              onChange={handleTrainingMethodChange}
              disabled={isTraining}
              className="method-select"
            >
              <option value="contrastive-divergence">
                –ö–æ–Ω—Ç—Ä–∞—Å—Ç–∏–≤–Ω–∞—è –¥–∏–≤–µ—Ä–≥–µ–Ω—Ü–∏—è (CD)
              </option>
              <option value="simulated-annealing">
                –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–∂–∏–≥–∞ (SA)
              </option>
            </select>
            <div className="method-description">
              {trainingMethod === 'contrastive-divergence' ? (
                <span>–ë—ã—Å—Ç—Ä—ã–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ (2002, –•–∏–Ω—Ç–æ–Ω)</span>
              ) : (
                <span>–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –∏–∑ —Ä–∞–±–æ—Ç—ã 1985 –≥–æ–¥–∞ (–•–∏–Ω—Ç–æ–Ω –∏ –°–µ–π–Ω–æ–≤—Å–∫–∏)</span>
              )}
            </div>
          </div>

          <label className="checkbox-container">
            <input
              type="checkbox"
              checked={useRealMNIST}
              onChange={handleDataSourceChange}
              disabled={isTraining}
            />
            <span className="checkbox-label">
              –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ{' '}
              <span 
                className="term-highlight" 
                data-tooltip="MNIST (Modified National Institute of Standards and Technology) ‚Äî —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç –¥–ª—è –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π 70,000 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ä—É–∫–æ–ø–∏—Å–Ω—ã—Ö —Ü–∏—Ñ—Ä –æ—Ç 0 –¥–æ 9. –ö–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–º–µ–µ—Ç —Ä–∞–∑–º–µ—Ä 28√ó28 –ø–∏–∫—Å–µ–ª–µ–π –≤ –æ—Ç—Ç–µ–Ω–∫–∞—Ö —Å–µ—Ä–æ–≥–æ."
              >
                MNIST
              </span>
            </span>
          </label>

          <label className="checkbox-container">
            <input
              type="checkbox"
              checked={saveWeights}
              onChange={handleSaveWeightsChange}
            />
            <span className="checkbox-label">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–µ—Å–∞ –≤ Local Storage</span>
          </label>
        </div>
      </div>

      {trainingProgress && (
        <ProgressBar 
          progress={trainingProgress.progress}
          status={trainingProgress.status}
        />
      )}
    </div>
  );
}