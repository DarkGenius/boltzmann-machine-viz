import { useState, useCallback, useRef } from 'react';
import { BernoulliRBM } from '../ml/BernoulliRBM';
import type { TrainingProgress, DataSource, TrainingMethod } from '../types';
import { loadMNIST } from '../utils/mnistGenerator';
import { loadRealMNIST } from '../utils/mnistLoader';

export function useRBM() {
  const [rbm, setRBM] = useState<BernoulliRBM | null>(null);
  const [mnistData, setMnistData] = useState<Float32Array[] | null>(null);
  const [trainingData, setTrainingData] = useState<Float32Array[] | null>(null);
  const [isTraining, setIsTraining] = useState(false);
  const [trainingProgress, setTrainingProgress] = useState<TrainingProgress | null>(null);
  const [dataSource, setDataSource] = useState<DataSource>('generated');
  const [trainingMethod, setTrainingMethod] = useState<TrainingMethod>('contrastive-divergence');

  const abortController = useRef<AbortController | null>(null);

  const loadData = useCallback(async (forceReload = false) => {
    if (!mnistData || forceReload) {
      let data: Float32Array[];
      
      if (dataSource === 'mnist') {
        try {
          data = await loadRealMNIST();
        } catch (error) {
          console.error('–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏:', error);
          data = await loadMNIST();
        }
      } else {
        data = await loadMNIST();
      }
      
      setMnistData(data);
      return data;
    }
    return mnistData;
  }, [mnistData, dataSource]);

  const trainNetwork = useCallback(async () => {
    console.log(`üé¨ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ. –¢–µ–∫—É—â–∏–π –º–µ—Ç–æ–¥: ${trainingMethod}`);
    if (isTraining) return;

    setIsTraining(true);
    abortController.current = new AbortController();
    
    try {
      setTrainingProgress({
        epoch: 0,
        totalEpochs: 15,
        progress: 0,
        status: '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...'
      });

      const fullData = await loadData(true); // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
      
      if (abortController.current?.signal.aborted) return;

      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –æ—Ç–∂–∏–≥–∞
      let trainingData: Float32Array[];
      if (trainingMethod === 'simulated-annealing') {
        // –í—ã–±–∏—Ä–∞–µ–º 10 —Ä–∞–∑–Ω—ã—Ö –æ–±—Ä–∞–∑—Ü–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ü–∏—Ñ—Ä–∞–º–∏
        const selectedIndices = new Set<number>();
        const digitCounts = new Array(10).fill(0); // –°—á–µ—Ç—á–∏–∫ –¥–ª—è –∫–∞–∂–¥–æ–π —Ü–∏—Ñ—Ä—ã (0-9)
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –æ–±—Ä–∞–∑—Ü—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Ü–∏—Ñ—Ä–∞–º–∏
        for (let i = 0; i < fullData.length && selectedIndices.size < 10; i++) {
          // –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–∏—Ñ—Ä—ã –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
          let digit = Math.floor(Math.random() * 10); // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
          
          // –ï—Å–ª–∏ —É –Ω–∞—Å –µ—â–µ –Ω–µ—Ç —ç—Ç–æ–π —Ü–∏—Ñ—Ä—ã –∏–ª–∏ —É –Ω–∞—Å –º–µ–Ω—å—à–µ 10 –æ–±—Ä–∞–∑—Ü–æ–≤
          if (digitCounts[digit] === 0 || selectedIndices.size < 5) {
            selectedIndices.add(i);
            digitCounts[digit]++;
          }
        }
        
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–∞–∑–Ω—ã—Ö, –¥–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ
        while (selectedIndices.size < 10) {
          const randomIndex = Math.floor(Math.random() * fullData.length);
          if (!selectedIndices.has(randomIndex)) {
            selectedIndices.add(randomIndex);
          }
        }
        
        trainingData = Array.from(selectedIndices).map(index => fullData[index]);
        console.log(`‚ùÑÔ∏è –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–∂–∏–≥–∞: –≤—ã–±—Ä–∞–Ω–æ ${trainingData.length} —Ä–∞–∑–Ω—ã—Ö –æ–±—Ä–∞–∑—Ü–æ–≤ –∏–∑ ${fullData.length}`);
      } else {
        trainingData = fullData;
      }

      setTrainingData(trainingData);

      setTrainingProgress({
        epoch: 0,
        totalEpochs: 15,
        progress: 10,
        status: '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RBM...'
      });

      console.log(`üéØ –°–æ–∑–¥–∞–µ–º RBM —Å –º–µ—Ç–æ–¥–æ–º –æ–±—É—á–µ–Ω–∏—è: ${trainingMethod}`);
      const newRBM = new BernoulliRBM({
        nVisible: 784,
        nHidden: 64,
        learningRate: 0.06,
        batchSize: 32,
        trainingMethod: trainingMethod
      });

      if (abortController.current?.signal.aborted) return;

      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–æ—Ö –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –æ—Ç–∂–∏–≥–∞
      const epochs = trainingMethod === 'simulated-annealing' ? 25 : 15;
      await newRBM.fit(trainingData, epochs, (epoch, totalEpochs) => {
        if (abortController.current?.signal.aborted) return;
        
        const progress = 10 + (epoch / totalEpochs) * 90;
        setTrainingProgress({
          epoch,
          totalEpochs,
          progress,
          status: `–û–±—É—á–µ–Ω–∏–µ —Å–µ—Ç–∏... –≠–ø–æ—Ö–∞ ${epoch}/${totalEpochs}`
        });
      });

      if (abortController.current?.signal.aborted) return;

      setRBM(newRBM);
      
      const saveWeights = localStorage.getItem('rbm_save_weights') !== 'false';
      if (saveWeights) {
        newRBM.saveToLocalStorage();
      }

      setTrainingProgress({
        epoch: 15,
        totalEpochs: 15,
        progress: 100,
        status: '–û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!'
      });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è:', error);
      setTrainingProgress({
        epoch: 0,
        totalEpochs: 15,
        progress: 0,
        status: '–û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è'
      });
    } finally {
      setIsTraining(false);
      setTimeout(() => setTrainingProgress(null), 2000);
    }
  }, [isTraining, loadData, trainingMethod]);

  const loadSavedWeights = useCallback(() => {
    const loadedRBM = BernoulliRBM.loadFromLocalStorage();
    if (loadedRBM) {
      setRBM(loadedRBM);
      loadData(true);
    }
  }, [loadData]);

  const handleDataSourceChange = useCallback((newDataSource: DataSource) => {
    setDataSource(newDataSource);
    setMnistData(null); // –û—á–∏—â–∞–µ–º –∫–µ—à –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å–º–µ–Ω–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
  }, []);

  const handleTrainingMethodChange = useCallback((newMethod: TrainingMethod) => {
    console.log(`üîÑ –°–º–µ–Ω–∞ –º–µ—Ç–æ–¥–∞ –æ–±—É—á–µ–Ω–∏—è: ${trainingMethod} ‚Üí ${newMethod}`);
    setTrainingMethod(newMethod);
  }, [trainingMethod]);

  const stopTraining = useCallback(() => {
    if (abortController.current) {
      abortController.current.abort();
      setIsTraining(false);
      setTrainingProgress(null);
    }
  }, []);

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–µ—Ç–æ–¥–∞ –æ–±—É—á–µ–Ω–∏—è
  const getVisualizationData = useCallback(() => {
    if (trainingMethod === 'simulated-annealing' && trainingData) {
      return trainingData; // –î–ª—è SA –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –æ–±—É—á–µ–Ω–∏—è
    }
    return mnistData; // –î–ª—è CD –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
  }, [trainingMethod, trainingData, mnistData]);

  return {
    rbm,
    mnistData: getVisualizationData(),
    isTraining,
    trainingProgress,
    dataSource,
    trainingMethod,
    trainNetwork,
    loadSavedWeights,
    stopTraining,
    loadData,
    handleDataSourceChange,
    handleTrainingMethodChange
  };
}