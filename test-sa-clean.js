/**
 * –¢–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –∏–º–∏—Ç–∞—Ü–∏–∏ –æ—Ç–∂–∏–≥–∞ –≤ BernoulliRBM
 */

// –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞
class TestRunner {
  constructor() {
    this.tests = [];
    this.results = { passed: 0, failed: 0, total: 0 };
  }

  test(name, testFn) {
    this.tests.push({ name, testFn });
  }

  async run() {
    console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –∏–º–∏—Ç–∞—Ü–∏–∏ –æ—Ç–∂–∏–≥–∞...\n');
    
    for (const { name, testFn } of this.tests) {
      this.results.total++;
      try {
        await testFn();
        console.log(`‚úÖ ${name}`);
        this.results.passed++;
      } catch (error) {
        console.log(`‚ùå ${name}: ${error.message}`);
        this.results.failed++;
      }
    }

    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:`);
    console.log(`   –ü—Ä–æ–π–¥–µ–Ω–æ: ${this.results.passed}/${this.results.total}`);
    console.log(`   –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${this.results.failed}/${this.results.total}`);
    
    if (this.results.failed === 0) {
      console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    } else {
      console.log('‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å');
    }
  }

  assert(condition, message) {
    if (!condition) {
      throw new Error(message);
    }
  }
}

// –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è RBM –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
class TestRBM {
  constructor(nVisible, nHidden, learningRate = 0.06) {
    this.nVisible = nVisible;
    this.nHidden = nHidden;
    this.learningRate = learningRate;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ—Å–æ–≤
    this.weights = this.randomMatrix(nHidden, nVisible, 0.01);
    this.hiddenBias = new Float32Array(nHidden);
    this.visibleBias = new Float32Array(nVisible);
  }

  randomMatrix(rows, cols, scale) {
    const matrix = [];
    for (let i = 0; i < rows; i++) {
      matrix[i] = new Float32Array(cols);
      for (let j = 0; j < cols; j++) {
        matrix[i][j] = (Math.random() - 0.5) * 2 * scale;
      }
    }
    return matrix;
  }

  sigmoid(x) {
    return 1 / (1 + Math.exp(-x));
  }

  // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ —Å–∏—Å—Ç–µ–º—ã
  computeEnergy(visible, hidden) {
    let energy = 0;
    
    // –ß–ª–µ–Ω —Å–º–µ—â–µ–Ω–∏—è –≤–∏–¥–∏–º–æ–≥–æ —Å–ª–æ—è
    for (let i = 0; i < this.nVisible; i++) {
      energy -= this.visibleBias[i] * visible[i];
    }
    
    // –ß–ª–µ–Ω —Å–º–µ—â–µ–Ω–∏—è —Å–∫—Ä—ã—Ç–æ–≥–æ —Å–ª–æ—è
    for (let j = 0; j < this.nHidden; j++) {
      energy -= this.hiddenBias[j] * hidden[j];
    }
    
    // –ß–ª–µ–Ω –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –º–µ–∂–¥—É —Å–ª–æ—è–º–∏
    for (let i = 0; i < this.nVisible; i++) {
      for (let j = 0; j < this.nHidden; j++) {
        energy -= this.weights[j][i] * visible[i] * hidden[j];
      }
    }
    
    return energy;
  }

  sampleHiddenBinary(visible) {
    const hidden = new Float32Array(this.nHidden);
    for (let i = 0; i < this.nHidden; i++) {
      let activation = this.hiddenBias[i];
      for (let j = 0; j < this.nVisible; j++) {
        activation += visible[j] * this.weights[i][j];
      }
      const prob = this.sigmoid(activation);
      hidden[i] = Math.random() < prob ? 1 : 0;
    }
    return hidden;
  }

  // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –∏–º–∏—Ç–∞—Ü–∏–∏ –æ—Ç–∂–∏–≥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  simulatedAnnealing(data, maxIterations = 1000) {
    const initialTemperature = 2.0;
    const finalTemperature = 0.1;
    const coolingRate = 0.99;
    const stepsPerTemperature = 10;
    
    let temperature = initialTemperature;
    let totalIterations = 0;
    let acceptedMoves = 0;
    let energyHistory = [];
    
    // –ù–∞—á–∏–Ω–∞–µ–º —Å —Å–ª—É—á–∞–π–Ω–æ–≥–æ –æ–±—Ä–∞–∑—Ü–∞
    let currentSample = data[Math.floor(Math.random() * data.length)].slice();
    let currentHidden = this.sampleHiddenBinary(currentSample);
    let currentEnergy = this.computeEnergy(currentSample, currentHidden);
    
    energyHistory.push(currentEnergy);
    
    while (temperature > finalTemperature && totalIterations < maxIterations) {
      for (let step = 0; step < stepsPerTemperature && totalIterations < maxIterations; step++) {
        totalIterations++;
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        const proposedSample = currentSample.slice();
        const proposedHidden = currentHidden.slice();
        
        // –ò–∑–º–µ–Ω—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –Ω–µ–π—Ä–æ–Ω—ã
        const neuronsToFlip = Math.min(2, this.nHidden);
        for (let flip = 0; flip < neuronsToFlip; flip++) {
          const neuronIdx = Math.floor(Math.random() * this.nHidden);
          proposedHidden[neuronIdx] = proposedHidden[neuronIdx] > 0.5 ? 0 : 1;
        }
        
        // –ü–µ—Ä–µ–≤—ã—á–∏—Å–ª—è–µ–º –≤–∏–¥–∏–º—ã–π —Å–ª–æ–π
        for (let i = 0; i < this.nVisible; i++) {
          let activation = this.visibleBias[i];
          for (let j = 0; j < this.nHidden; j++) {
            activation += proposedHidden[j] * this.weights[j][i];
          }
          const prob = this.sigmoid(activation);
          proposedSample[i] = Math.random() < prob ? 1 : 0;
        }
        
        const proposedEnergy = this.computeEnergy(proposedSample, proposedHidden);
        const energyDiff = proposedEnergy - currentEnergy;
        
        // –ö—Ä–∏—Ç–µ—Ä–∏–π –ú–µ—Ç—Ä–æ–ø–æ–ª–∏—Å–∞
        let shouldAccept = false;
        if (energyDiff <= 0) {
          shouldAccept = true;
        } else {
          const acceptProbability = Math.exp(-energyDiff / temperature);
          shouldAccept = Math.random() < acceptProbability;
        }
        
        if (shouldAccept) {
          acceptedMoves++;
          currentSample = proposedSample;
          currentHidden = proposedHidden;
          currentEnergy = proposedEnergy;
        }
        
        energyHistory.push(currentEnergy);
      }
      
      temperature *= coolingRate;
    }
    
    return {
      totalIterations,
      acceptedMoves,
      finalEnergy: currentEnergy,
      energyHistory,
      acceptanceRate: acceptedMoves / totalIterations
    };
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
function generateTestData(nSamples, nVisible) {
  const data = [];
  for (let i = 0; i < nSamples; i++) {
    const sample = new Float32Array(nVisible);
    for (let j = 0; j < nVisible; j++) {
      sample[j] = Math.random() < 0.3 ? 1 : 0; // –†–∞–∑—Ä–µ–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    }
    data.push(sample);
  }
  return data;
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
const runner = new TestRunner();

// –¢–µ—Å—Ç 1: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏
runner.test('–≠–Ω–µ—Ä–≥–∏—è –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', () => {
  const rbm = new TestRBM(4, 3);
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –≤–µ—Å–∞ –∏ —Å–º–µ—â–µ–Ω–∏—è
  rbm.weights[0][0] = 0.5;
  rbm.weights[0][1] = -0.3;
  rbm.hiddenBias[0] = 0.2;
  rbm.visibleBias[0] = -0.1;
  rbm.visibleBias[1] = 0.4;
  
  const visible = new Float32Array([1, 0, 1, 0]);
  const hidden = new Float32Array([1, 0, 1]);
  
  const energy = rbm.computeEnergy(visible, hidden);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–Ω–µ—Ä–≥–∏—è –∫–æ–Ω–µ—á–Ω–∞
  runner.assert(isFinite(energy), '–≠–Ω–µ—Ä–≥–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–æ–Ω–µ—á–Ω–æ–π');
  runner.assert(!isNaN(energy), '–≠–Ω–µ—Ä–≥–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å NaN');
  
  console.log(`  –í—ã—á–∏—Å–ª–µ–Ω–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è: ${energy.toFixed(4)}`);
});

// –¢–µ—Å—Ç 2: –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–Ω—è—Ç–∏—è –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
runner.test('–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–Ω—è—Ç–∏—è –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö', async () => {
  const rbm = new TestRBM(6, 4);
  const data = generateTestData(20, 6);
  
  const result = rbm.simulatedAnnealing(data, 500);
  
  runner.assert(result.acceptanceRate > 0.05, `–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–Ω—è—Ç–∏—è —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–π: ${(result.acceptanceRate * 100).toFixed(1)}%`);
  runner.assert(result.acceptanceRate < 0.8, `–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–Ω—è—Ç–∏—è —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–π: ${(result.acceptanceRate * 100).toFixed(1)}%`);
  
  console.log(`  –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–Ω—è—Ç–∏—è: ${(result.acceptanceRate * 100).toFixed(1)}%`);
  console.log(`  –§–∏–Ω–∞–ª—å–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è: ${result.finalEnergy.toFixed(4)}`);
});

// –¢–µ—Å—Ç 3: –≠–Ω–µ—Ä–≥–∏—è –≤ —Ü–µ–ª–æ–º —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è
runner.test('–≠–Ω–µ—Ä–≥–∏—è —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –∏–ª–∏ —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è', async () => {
  const rbm = new TestRBM(6, 4);
  const data = generateTestData(20, 6);
  
  const result = rbm.simulatedAnnealing(data, 800);
  
  const initialEnergy = result.energyHistory[0];
  const finalEnergy = result.energyHistory[result.energyHistory.length - 1];
  
  const energyReduction = initialEnergy - finalEnergy;
  
  console.log(`  –ù–∞—á–∞–ª—å–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è: ${initialEnergy.toFixed(4)}`);
  console.log(`  –§–∏–Ω–∞–ª—å–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è: ${finalEnergy.toFixed(4)}`);
  console.log(`  –ò–∑–º–µ–Ω–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏: ${energyReduction.toFixed(4)}`);
  
  // –î–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–±–æ–ª—å—à–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ –∏–∑-–∑–∞ —Å—Ç–æ—Ö–∞—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
  runner.assert(energyReduction > -3.0, '–≠–Ω–µ—Ä–≥–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ —Å–∏–ª—å–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å—Å—è');
});

// –¢–µ—Å—Ç 4: –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º–∞
runner.test('–ê–ª–≥–æ—Ä–∏—Ç–º —Å—Ç–∞–±–∏–ª–µ–Ω –ø—Ä–∏ –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ–º –∑–∞–ø—É—Å–∫–µ', async () => {
  const rbm = new TestRBM(4, 3);
  const data = generateTestData(10, 4);
  
  const results = [];
  const numRuns = 5;
  
  for (let run = 0; run < numRuns; run++) {
    const result = rbm.simulatedAnnealing(data, 300);
    results.push(result);
    
    runner.assert(isFinite(result.finalEnergy), `–ü—Ä–æ–≥–æ–Ω ${run + 1}: –§–∏–Ω–∞–ª—å–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–æ–Ω–µ—á–Ω–æ–π`);
    runner.assert(result.acceptanceRate > 0, `–ü—Ä–æ–≥–æ–Ω ${run + 1}: –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–∏–Ω—è—Ç—ã–π —Ö–æ–¥`);
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ —Å–ª–∏—à–∫–æ–º —Å–∏–ª—å–Ω–æ —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è
  const acceptanceRates = results.map(r => r.acceptanceRate);
  const avgAcceptance = acceptanceRates.reduce((a, b) => a + b) / numRuns;
  const maxDeviation = Math.max(...acceptanceRates.map(rate => Math.abs(rate - avgAcceptance)));
  
  console.log(`  –°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–Ω—è—Ç–∏—è: ${(avgAcceptance * 100).toFixed(1)}%`);
  console.log(`  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ: ${(maxDeviation * 100).toFixed(1)}%`);
  
  runner.assert(maxDeviation < 0.4, '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å—Ç–∞–±–∏–ª—å–Ω—ã–º–∏ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏');
});

// –¢–µ—Å—Ç 5: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
runner.test('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è –º–æ–Ω–æ—Ç–æ–Ω–Ω–æ', async () => {
  const initialTemperature = 2.0;
  const finalTemperature = 0.1;
  const coolingRate = 0.95;
  
  let temperature = initialTemperature;
  const temperatures = [temperature];
  
  // –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ö–ª–∞–∂–¥–µ–Ω–∏–µ
  for (let i = 0; i < 50; i++) {
    temperature *= coolingRate;
    temperatures.push(temperature);
    if (temperature <= finalTemperature) break;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–Ω–æ—Ç–æ–Ω–Ω–æ—Å—Ç—å
  for (let i = 1; i < temperatures.length; i++) {
    runner.assert(temperatures[i] <= temperatures[i-1], '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –º–æ–Ω–æ—Ç–æ–Ω–Ω–æ —É–º–µ–Ω—å—à–∞—Ç—å—Å—è');
  }
  
  runner.assert(temperatures[0] === initialTemperature, '–ù–∞—á–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π');
  runner.assert(temperatures[temperatures.length - 1] <= finalTemperature * 1.1, '–§–∏–Ω–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–ª–∏–∑–∫–∞ –∫ –∑–∞–¥–∞–Ω–Ω–æ–π');
  
  console.log(`  –ù–∞—á–∞–ª—å–Ω–∞—è T: ${temperatures[0].toFixed(3)}`);
  console.log(`  –§–∏–Ω–∞–ª—å–Ω–∞—è T: ${temperatures[temperatures.length - 1].toFixed(3)}`);
});

// –¢–µ—Å—Ç 6: –†–∞–±–æ—Ç–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏ —Å–µ—Ç–∏
runner.test('–ê–ª–≥–æ—Ä–∏—Ç–º —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏ —Å–µ—Ç–∏', async () => {
  const sizes = [
    { visible: 2, hidden: 2 },
    { visible: 8, hidden: 4 },
    { visible: 10, hidden: 6 }
  ];
  
  for (const { visible, hidden } of sizes) {
    const rbm = new TestRBM(visible, hidden);
    const data = generateTestData(15, visible);
    
    const result = rbm.simulatedAnnealing(data, 200);
    
    runner.assert(isFinite(result.finalEnergy), `–†–∞–∑–º–µ—Ä ${visible}x${hidden}: –≠–Ω–µ—Ä–≥–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–æ–Ω–µ—á–Ω–æ–π`);
    runner.assert(result.acceptanceRate > 0, `–†–∞–∑–º–µ—Ä ${visible}x${hidden}: –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–∏–Ω—è—Ç—ã–π —Ö–æ–¥`);
    
    console.log(`  ${visible}x${hidden}: –ø—Ä–∏–Ω—è—Ç–∏–µ ${(result.acceptanceRate * 100).toFixed(1)}%, —ç–Ω–µ—Ä–≥–∏—è ${result.finalEnergy.toFixed(3)}`);
  }
});

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
runner.run().then(() => {
  console.log('\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
}).catch(error => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤:', error);
});