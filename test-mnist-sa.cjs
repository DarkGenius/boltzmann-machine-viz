/**
 * –¢–µ—Å—Ç –æ–±—É—á–µ–Ω–∏—è RBM –Ω–∞ –æ–±—Ä–∞–∑—Ü–∞—Ö MNIST —Å –ø–æ–º–æ—â—å—é –∏–º–∏—Ç–∞—Ü–∏–∏ –æ—Ç–∂–∏–≥–∞
 */

const fs = require('fs');
const path = require('path');

// –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞
class TestRunner {
  constructor() {
    this.tests = [];
    this.results = { passed: 0, failed: 0, total: 0 };
  }

  test(name, testFn) {
    this.tests.push({ name, testFn });
  }

  async run() {
    console.log('üß™ –¢–µ—Å—Ç –æ–±—É—á–µ–Ω–∏—è RBM –Ω–∞ MNIST —Å –∏–º–∏—Ç–∞—Ü–∏–µ–π –æ—Ç–∂–∏–≥–∞...\n');
    
    for (const { name, testFn } of this.tests) {
      this.results.total++;
      try {
        await testFn();
        console.log(`‚úÖ ${name}`);
        this.results.passed++;
      } catch (error) {
        console.log(`‚ùå ${name}: ${error.message}`);
        this.results.failed++;
      }
    }

    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:`);
    console.log(`   –ü—Ä–æ–π–¥–µ–Ω–æ: ${this.results.passed}/${this.results.total}`);
    console.log(`   –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${this.results.failed}/${this.results.total}`);
    
    if (this.results.failed === 0) {
      console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    } else {
      console.log('‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å');
    }
  }

  assert(condition, message) {
    if (!condition) {
      throw new Error(message);
    }
  }

  assertApprox(actual, expected, tolerance = 0.01, message = '') {
    const diff = Math.abs(actual - expected);
    if (diff > tolerance) {
      throw new Error(`${message} Expected ~${expected}, got ${actual} (diff: ${diff})`);
    }
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä MNIST-–ø–æ–¥–æ–±–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
class MNISTGenerator {
  // –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã, –ø–æ—Ö–æ–∂–∏–µ –Ω–∞ —Ü–∏—Ñ—Ä—ã MNIST
  static generateDigitPattern(digit, size = 28) {
    const pattern = new Float32Array(size * size);
    
    switch(digit) {
      case 0: // –ö—Ä—É–≥
        this.drawCircle(pattern, size, size / 2, size / 2, size / 3);
        break;
      case 1: // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
        this.drawLine(pattern, size, size / 2, size / 4, size / 2, 3 * size / 4);
        break;
      case 2: // S-–æ–±—Ä–∞–∑–Ω–∞—è –∫—Ä–∏–≤–∞—è
        this.drawSCurve(pattern, size);
        break;
      case 3: // –î–≤–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
        this.drawLine(pattern, size, size / 4, size / 3, 3 * size / 4, size / 3);
        this.drawLine(pattern, size, size / 4, 2 * size / 3, 3 * size / 4, 2 * size / 3);
        break;
      case 4: // L-–æ–±—Ä–∞–∑–Ω–∞—è —Ñ–∏–≥—É—Ä–∞
        this.drawLShape(pattern, size);
        break;
      case 5: // –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
        this.drawRectangle(pattern, size, size / 4, size / 4, size / 2, size / 2);
        break;
      case 6: // –°–ø–∏—Ä–∞–ª—å
        this.drawSpiral(pattern, size);
        break;
      case 7: // –î–∏–∞–≥–æ–Ω–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
        this.drawDiagonal(pattern, size);
        break;
      case 8: // –í–æ—Å—å–º–µ—Ä–∫–∞
        this.drawEight(pattern, size);
        break;
      case 9: // –ö—Ä—É–≥ —Å —Ö–≤–æ—Å—Ç–∏–∫–æ–º
        this.drawCircle(pattern, size, size / 2, size / 3, size / 6);
        this.drawLine(pattern, size, size / 2, size / 2, size / 2, 3 * size / 4);
        break;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π —à—É–º
    for (let i = 0; i < pattern.length; i++) {
      if (Math.random() < 0.05) { // 5% —à—É–º–∞
        pattern[i] = Math.random() > 0.5 ? 1 : 0;
      }
    }
    
    return pattern;
  }

  static drawCircle(pattern, size, centerX, centerY, radius) {
    for (let y = 0; y < size; y++) {
      for (let x = 0; x < size; x++) {
        const dx = x - centerX;
        const dy = y - centerY;
        const distance = Math.sqrt(dx * dx + dy * dy);
        if (distance >= radius - 2 && distance <= radius + 2) {
          pattern[y * size + x] = 1;
        }
      }
    }
  }

  static drawLine(pattern, size, x1, y1, x2, y2) {
    const dx = Math.abs(x2 - x1);
    const dy = Math.abs(y2 - y1);
    const steps = Math.max(dx, dy);
    
    for (let i = 0; i <= steps; i++) {
      const x = Math.round(x1 + (x2 - x1) * i / steps);
      const y = Math.round(y1 + (y2 - y1) * i / steps);
      if (x >= 0 && x < size && y >= 0 && y < size) {
        pattern[y * size + x] = 1;
        // –£—Ç–æ–ª—â–∞–µ–º –ª–∏–Ω–∏—é
        if (x + 1 < size) pattern[y * size + x + 1] = 1;
        if (y + 1 < size) pattern[(y + 1) * size + x] = 1;
      }
    }
  }

  static drawSCurve(pattern, size) {
    for (let x = size / 4; x < 3 * size / 4; x++) {
      const y1 = size / 3 + Math.sin((x - size / 4) / (size / 2) * Math.PI) * size / 6;
      const y2 = 2 * size / 3 + Math.sin((x - size / 4) / (size / 2) * Math.PI) * size / 6;
      this.setPixel(pattern, size, x, Math.round(y1));
      this.setPixel(pattern, size, x, Math.round(y2));
    }
  }

  static drawLShape(pattern, size) {
    // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å L
    this.drawLine(pattern, size, size / 4, size / 4, size / 4, 3 * size / 4);
    // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å L
    this.drawLine(pattern, size, size / 4, 3 * size / 4, 3 * size / 4, 3 * size / 4);
  }

  static drawRectangle(pattern, size, x, y, width, height) {
    for (let i = 0; i < width; i++) {
      for (let j = 0; j < height; j++) {
        if (i === 0 || i === width - 1 || j === 0 || j === height - 1) {
          this.setPixel(pattern, size, x + i, y + j);
        }
      }
    }
  }

  static drawSpiral(pattern, size) {
    const centerX = size / 2;
    const centerY = size / 2;
    let angle = 0;
    let radius = 2;
    
    while (radius < size / 3) {
      const x = centerX + radius * Math.cos(angle);
      const y = centerY + radius * Math.sin(angle);
      this.setPixel(pattern, size, Math.round(x), Math.round(y));
      angle += 0.2;
      radius += 0.3;
    }
  }

  static drawDiagonal(pattern, size) {
    this.drawLine(pattern, size, size / 4, size / 4, 3 * size / 4, 3 * size / 4);
  }

  static drawEight(pattern, size) {
    // –í–µ—Ä—Ö–Ω–∏–π –∫—Ä—É–≥
    this.drawCircle(pattern, size, size / 2, size / 3, size / 6);
    // –ù–∏–∂–Ω–∏–π –∫—Ä—É–≥
    this.drawCircle(pattern, size, size / 2, 2 * size / 3, size / 6);
  }

  static setPixel(pattern, size, x, y) {
    if (x >= 0 && x < size && y >= 0 && y < size) {
      pattern[y * size + x] = 1;
    }
  }

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–∞–±–æ—Ä –∏–∑ N –æ–±—Ä–∞–∑—Ü–æ–≤ —Ä–∞–∑–Ω—ã—Ö —Ü–∏—Ñ—Ä
  static generate10Samples(imageSize = 28) {
    const samples = [];
    for (let digit = 0; digit < 10; digit++) {
      const pattern = this.generateDigitPattern(digit, imageSize);
      samples.push(pattern);
    }
    return samples;
  }

  // –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏
  static visualizePattern(pattern, size = 28) {
    let output = '';
    for (let y = 0; y < size; y++) {
      for (let x = 0; x < size; x++) {
        output += pattern[y * size + x] > 0.5 ? '‚ñà' : ' ';
      }
      output += '\n';
    }
    return output;
  }
}

// –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è RBM –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ MNIST
class MNISTRBM {
  constructor(nVisible, nHidden, learningRate = 0.01) {
    this.nVisible = nVisible;
    this.nHidden = nHidden;
    this.learningRate = learningRate;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ—Å–æ–≤ (–Ω–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ –¥–ª—è MNIST)
    this.weights = this.randomMatrix(nHidden, nVisible, 0.1);
    this.hiddenBias = new Float32Array(nHidden);
    this.visibleBias = new Float32Array(nVisible);
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è
    this.energyHistory = [];
    this.reconstructionErrors = [];
  }

  randomMatrix(rows, cols, scale) {
    const matrix = [];
    for (let i = 0; i < rows; i++) {
      matrix[i] = new Float32Array(cols);
      for (let j = 0; j < cols; j++) {
        matrix[i][j] = (Math.random() - 0.5) * 2 * scale;
      }
    }
    return matrix;
  }

  sigmoid(x) {
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º x –¥–ª—è —á–∏—Å–ª–µ–Ω–Ω–æ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    const clampedX = Math.max(-20, Math.min(20, x));
    return 1 / (1 + Math.exp(-clampedX));
  }

  // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ —Å–∏—Å—Ç–µ–º—ã
  computeEnergy(visible, hidden) {
    let energy = 0;
    
    // –ß–ª–µ–Ω —Å–º–µ—â–µ–Ω–∏—è –≤–∏–¥–∏–º–æ–≥–æ —Å–ª–æ—è
    for (let i = 0; i < this.nVisible; i++) {
      energy -= this.visibleBias[i] * visible[i];
    }
    
    // –ß–ª–µ–Ω —Å–º–µ—â–µ–Ω–∏—è —Å–∫—Ä—ã—Ç–æ–≥–æ —Å–ª–æ—è
    for (let j = 0; j < this.nHidden; j++) {
      energy -= this.hiddenBias[j] * hidden[j];
    }
    
    // –ß–ª–µ–Ω –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –º–µ–∂–¥—É —Å–ª–æ—è–º–∏
    for (let i = 0; i < this.nVisible; i++) {
      for (let j = 0; j < this.nHidden; j++) {
        energy -= this.weights[j][i] * visible[i] * hidden[j];
      }
    }
    
    return energy;
  }

  sampleHiddenBinary(visible) {
    const hidden = new Float32Array(this.nHidden);
    for (let i = 0; i < this.nHidden; i++) {
      let activation = this.hiddenBias[i];
      for (let j = 0; j < this.nVisible; j++) {
        activation += visible[j] * this.weights[i][j];
      }
      const prob = this.sigmoid(activation);
      hidden[i] = Math.random() < prob ? 1 : 0;
    }
    return hidden;
  }

  sampleHidden(visible) {
    const hidden = new Float32Array(this.nHidden);
    for (let i = 0; i < this.nHidden; i++) {
      let activation = this.hiddenBias[i];
      for (let j = 0; j < this.nVisible; j++) {
        activation += visible[j] * this.weights[i][j];
      }
      hidden[i] = this.sigmoid(activation);
    }
    return hidden;
  }

  sampleVisible(hidden) {
    const visible = new Float32Array(this.nVisible);
    for (let i = 0; i < this.nVisible; i++) {
      let activation = this.visibleBias[i];
      for (let j = 0; j < this.nHidden; j++) {
        activation += hidden[j] * this.weights[j][i];
      }
      const prob = this.sigmoid(activation);
      visible[i] = Math.random() < prob ? 1 : 0;
    }
    return visible;
  }

  // –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–∂–∏–≥–∞ –¥–ª—è MNIST
  simulatedAnnealing(data, epochs = 10) {
    console.log(`üî• –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ RBM ${this.nVisible}x${this.nHidden} –Ω–∞ ${data.length} –æ–±—Ä–∞–∑—Ü–∞—Ö MNIST...`);
    
    const initialTemperature = 5.0; // –í—ã—à–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è MNIST
    const finalTemperature = 0.01;
    const coolingRate = 0.95;
    const stepsPerTemperature = 30;
    
    let temperature = initialTemperature;
    let totalIterations = 0;
    let acceptedMoves = 0;
    
    // –ù–∞—á–∏–Ω–∞–µ–º —Å —Å–ª—É—á–∞–π–Ω–æ–≥–æ –æ–±—Ä–∞–∑—Ü–∞
    let currentSampleIdx = Math.floor(Math.random() * data.length);
    let currentSample = data[currentSampleIdx].slice();
    let currentHidden = this.sampleHiddenBinary(currentSample);
    let currentEnergy = this.computeEnergy(currentSample, currentHidden);
    
    this.energyHistory.push(currentEnergy);
    console.log(`üìä –ù–∞—á–∞–ª—å–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è: ${currentEnergy.toFixed(4)}`);
    
    for (let epoch = 0; epoch < epochs; epoch++) {
      let epochAccepted = 0;
      let epochIterations = 0;
      
      temperature = initialTemperature * Math.pow(coolingRate, epoch);
      
      while (epochIterations < stepsPerTemperature * 10) { // –ë–æ–ª—å—à–µ –∏—Ç–µ—Ä–∞—Ü–∏–π –¥–ª—è MNIST
        totalIterations++;
        epochIterations++;
        
        // –í—ã–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–∑–µ—Ü –∏–∑ –¥–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º—è –æ—Ç –≤—Ä–µ–º–µ–Ω–∏
        if (totalIterations % 20 === 0) {
          currentSampleIdx = Math.floor(Math.random() * data.length);
          currentSample = data[currentSampleIdx].slice();
          currentHidden = this.sampleHiddenBinary(currentSample);
          currentEnergy = this.computeEnergy(currentSample, currentHidden);
        }
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        const proposedSample = currentSample.slice();
        const proposedHidden = currentHidden.slice();
        
        // –ò–∑–º–µ–Ω—è–µ–º –±–æ–ª—å—à–µ –Ω–µ–π—Ä–æ–Ω–æ–≤ –¥–ª—è MNIST (–±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã)
        const neuronsToFlip = Math.min(5, Math.max(1, Math.floor(this.nHidden * 0.1)));
        for (let flip = 0; flip < neuronsToFlip; flip++) {
          const neuronIdx = Math.floor(Math.random() * this.nHidden);
          proposedHidden[neuronIdx] = proposedHidden[neuronIdx] > 0.5 ? 0 : 1;
        }
        
        // –ü–µ—Ä–µ–≤—ã—á–∏—Å–ª—è–µ–º –≤–∏–¥–∏–º—ã–π —Å–ª–æ–π
        for (let i = 0; i < this.nVisible; i++) {
          let activation = this.visibleBias[i];
          for (let j = 0; j < this.nHidden; j++) {
            activation += proposedHidden[j] * this.weights[j][i];
          }
          const prob = this.sigmoid(activation);
          proposedSample[i] = Math.random() < prob ? 1 : 0;
        }
        
        const proposedEnergy = this.computeEnergy(proposedSample, proposedHidden);
        const energyDiff = proposedEnergy - currentEnergy;
        
        // –ö—Ä–∏—Ç–µ—Ä–∏–π –ú–µ—Ç—Ä–æ–ø–æ–ª–∏—Å–∞
        let shouldAccept = false;
        if (energyDiff <= 0) {
          shouldAccept = true;
        } else {
          const acceptProbability = Math.exp(-energyDiff / temperature);
          shouldAccept = Math.random() < acceptProbability;
        }
        
        if (shouldAccept) {
          acceptedMoves++;
          epochAccepted++;
          currentSample = proposedSample;
          currentHidden = proposedHidden;
          currentEnergy = proposedEnergy;
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Å–∞ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –ø—Ä–∏–Ω—è—Ç–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
          if (acceptedMoves % 5 === 0) {
            this.updateWeights(data[currentSampleIdx], currentSample, currentHidden);
          }
        }
        
        if (totalIterations % 100 === 0) {
          this.energyHistory.push(currentEnergy);
        }
      }
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π —ç–ø–æ—Ö–∏
      const reconstructionError = this.testReconstruction(data);
      this.reconstructionErrors.push(reconstructionError);
      
      const epochAcceptanceRate = (epochAccepted / epochIterations * 100).toFixed(1);
      console.log(`üìà –≠–ø–æ—Ö–∞ ${epoch + 1}/${epochs}: T=${temperature.toFixed(3)}, –ø—Ä–∏–Ω—è—Ç–æ=${epochAcceptanceRate}%, —ç–Ω–µ—Ä–≥–∏—è=${currentEnergy.toFixed(4)}, –æ—à–∏–±–∫–∞ —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏=${reconstructionError.toFixed(4)}`);
    }
    
    const finalAcceptanceRate = (acceptedMoves / totalIterations * 100).toFixed(1);
    console.log(`‚ùÑÔ∏è –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: –∏—Ç–µ—Ä–∞—Ü–∏–π=${totalIterations}, –ø—Ä–∏–Ω—è—Ç–æ=${finalAcceptanceRate}%`);
    console.log(`‚ö° –§–∏–Ω–∞–ª—å–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è: ${currentEnergy.toFixed(4)}`);
    
    return {
      totalIterations,
      acceptedMoves,
      finalEnergy: currentEnergy,
      acceptanceRate: acceptedMoves / totalIterations,
      energyHistory: this.energyHistory,
      reconstructionErrors: this.reconstructionErrors
    };
  }

  // –ü—Ä–æ—Å—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Å–æ–≤
  updateWeights(originalSample, currentSample, currentHidden) {
    const dataHidden = this.sampleHidden(originalSample);
    const lr = this.learningRate * 0.1;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Å–∞: –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∞–∑–∞ (–¥–∞–Ω–Ω—ã–µ) - –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Ñ–∞–∑–∞ (–º–æ–¥–µ–ª—å)
    for (let i = 0; i < this.nVisible; i++) {
      for (let j = 0; j < this.nHidden; j++) {
        const dataCorr = originalSample[i] * dataHidden[j];
        const modelCorr = currentSample[i] * currentHidden[j];
        this.weights[j][i] += lr * (dataCorr - modelCorr);
      }
      this.visibleBias[i] += lr * (originalSample[i] - currentSample[i]);
    }
    
    for (let j = 0; j < this.nHidden; j++) {
      this.hiddenBias[j] += lr * (dataHidden[j] - currentHidden[j]);
    }
  }

  // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
  testReconstruction(data) {
    let totalError = 0;
    const testSamples = Math.min(5, data.length);
    
    for (let i = 0; i < testSamples; i++) {
      const sample = data[i];
      const hidden = this.sampleHidden(sample);
      const reconstruction = this.sampleVisible(hidden);
      
      // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–∫–≤–∞–¥—Ä–∞—Ç–∏—á–Ω—É—é –æ—à–∏–±–∫—É
      let sampleError = 0;
      for (let j = 0; j < this.nVisible; j++) {
        const diff = sample[j] - reconstruction[j];
        sampleError += diff * diff;
      }
      totalError += Math.sqrt(sampleError / this.nVisible);
    }
    
    return totalError / testSamples;
  }

  // –†–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –æ–±—Ä–∞–∑—Ü–∞
  reconstruct(sample) {
    const hidden = this.sampleHidden(sample);
    const reconstruction = this.sampleVisible(hidden);
    return reconstruction;
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
const runner = new TestRunner();

// –¢–µ—Å—Ç: –û–±—É—á–µ–Ω–∏–µ RBM –Ω–∞ MNIST –æ–±—Ä–∞–∑—Ü–∞—Ö
runner.test('–û–±—É—á–µ–Ω–∏–µ RBM –Ω–∞ 10 –æ–±—Ä–∞–∑—Ü–∞—Ö MNIST —Å –∏–º–∏—Ç–∞—Ü–∏–µ–π –æ—Ç–∂–∏–≥–∞', async () => {
  const imageSize = 14; // –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const hiddenSize = 20;
  
  console.log(`\nüéØ –°–æ–∑–¥–∞–µ–º RBM ${imageSize * imageSize}x${hiddenSize} –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –Ω–∞ MNIST...`);
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 10 –æ–±—Ä–∞–∑—Ü–æ–≤ MNIST-–ø–æ–¥–æ–±–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const mnistSamples = MNISTGenerator.generate10Samples(imageSize);
  
  console.log(`üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${mnistSamples.length} –æ–±—Ä–∞–∑—Ü–æ–≤ —Ä–∞–∑–º–µ—Ä–∞ ${imageSize}x${imageSize}`);
  console.log('üìã –ü—Ä–∏–º–µ—Ä—ã –æ–±—Ä–∞–∑—Ü–æ–≤:');
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –æ–±—Ä–∞–∑—Ü–∞
  for (let i = 0; i < 3; i++) {
    console.log(`\n–¶–∏—Ñ—Ä–∞ ${i}:`);
    console.log(MNISTGenerator.visualizePattern(mnistSamples[i], imageSize));
  }
  
  // –°–æ–∑–¥–∞–µ–º –∏ –æ–±—É—á–∞–µ–º RBM
  const rbm = new MNISTRBM(imageSize * imageSize, hiddenSize, 0.01);
  
  const startTime = Date.now();
  const result = rbm.simulatedAnnealing(mnistSamples, 5); // 5 —ç–ø–æ—Ö –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const trainingTime = (Date.now() - startTime) / 1000;
  
  console.log(`\n‚è±Ô∏è –í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è: ${trainingTime.toFixed(2)} —Å–µ–∫`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
  runner.assert(isFinite(result.finalEnergy), '–§–∏–Ω–∞–ª—å–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫–æ–Ω–µ—á–Ω–æ–π');
  runner.assert(result.acceptanceRate > 0, '–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–∏–Ω—è—Ç—ã–π —Ö–æ–¥');
  runner.assert(result.energyHistory.length > 0, '–ò—Å—Ç–æ—Ä–∏—è —ç–Ω–µ—Ä–≥–∏–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–ø–∏—Å–∞–Ω–∞');
  runner.assert(result.reconstructionErrors.length > 0, '–û—à–∏–±–∫–∏ —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–∏—Å–∞–Ω—ã');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—à–∏–±–∫–∞ —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è –∏–ª–∏ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è
  const initialError = result.reconstructionErrors[0];
  const finalError = result.reconstructionErrors[result.reconstructionErrors.length - 1];
  const errorImprovement = initialError - finalError;
  
  console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—É—á–µ–Ω–∏—è:`);
  console.log(`   –ù–∞—á–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: ${initialError.toFixed(4)}`);
  console.log(`   –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: ${finalError.toFixed(4)}`);
  console.log(`   –£–ª—É—á—à–µ–Ω–∏–µ: ${errorImprovement.toFixed(4)}`);
  console.log(`   –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–Ω—è—Ç–∏—è: ${(result.acceptanceRate * 100).toFixed(1)}%`);
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –æ–±—Ä–∞–∑—Ü–æ–≤
  console.log(`\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:`);
  for (let i = 0; i < 3; i++) {
    const original = mnistSamples[i];
    const reconstructed = rbm.reconstruct(original);
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ö–æ–¥—Å—Ç–≤–æ
    let similarity = 0;
    for (let j = 0; j < original.length; j++) {
      if ((original[j] > 0.5) === (reconstructed[j] > 0.5)) {
        similarity++;
      }
    }
    const similarityPercent = (similarity / original.length * 100).toFixed(1);
    
    console.log(`   –¶–∏—Ñ—Ä–∞ ${i}: —Å—Ö–æ–¥—Å—Ç–≤–æ ${similarityPercent}%`);
    
    if (i === 0) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–µ—Ä–≤–æ–≥–æ –æ–±—Ä–∞–∑—Ü–∞
      console.log('   –û—Ä–∏–≥–∏–Ω–∞–ª:');
      console.log(MNISTGenerator.visualizePattern(original, imageSize));
      console.log('   –†–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:');
      console.log(MNISTGenerator.visualizePattern(reconstructed, imageSize));
    }
  }
  
  // –î–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –∏–∑-–∑–∞ —Å—Ç–æ—Ö–∞—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
  runner.assert(errorImprovement > -0.3, '–û—à–∏–±–∫–∞ —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–µ –¥–æ–ª–∂–Ω–∞ —Å–∏–ª—å–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å—Å—è');
  runner.assert(finalError < 1.0, '–§–∏–Ω–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–∑—É–º–Ω–æ–π');
  
  console.log(`\n‚úÖ RBM —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞ –Ω–∞ –æ–±—Ä–∞–∑—Ü–∞—Ö MNIST!`);
});

// –¢–µ—Å—Ç: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Ä–∞–∑–ª–∏—á–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —Ü–∏—Ñ—Ä—ã
runner.test('RBM —Ä–∞–∑–ª–∏—á–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ —Ü–∏—Ñ—Ä—ã –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è', async () => {
  const imageSize = 12;
  const hiddenSize = 15;
  
  const mnistSamples = MNISTGenerator.generate10Samples(imageSize);
  const rbm = new MNISTRBM(imageSize * imageSize, hiddenSize, 0.01);
  
  // –ë—ã—Å—Ç—Ä–æ–µ –æ–±—É—á–µ–Ω–∏–µ
  rbm.simulatedAnnealing(mnistSamples, 3);
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–∫—Ä—ã—Ç—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
  const hiddenRepresentations = [];
  for (let i = 0; i < mnistSamples.length; i++) {
    const hidden = rbm.sampleHidden(mnistSamples[i]);
    hiddenRepresentations.push(hidden);
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞–∑–Ω—ã–µ —Ü–∏—Ñ—Ä—ã –¥–∞—é—Ç —Ä–∞–∑–Ω—ã–µ —Å–∫—Ä—ã—Ç—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
  let differentRepresentations = 0;
  for (let i = 0; i < hiddenRepresentations.length; i++) {
    for (let j = i + 1; j < hiddenRepresentations.length; j++) {
      let diff = 0;
      for (let k = 0; k < hiddenSize; k++) {
        diff += Math.abs(hiddenRepresentations[i][k] - hiddenRepresentations[j][k]);
      }
      if (diff > 0.5) { // –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–∞—è —Ä–∞–∑–Ω–∏—Ü–∞
        differentRepresentations++;
      }
    }
  }
  
  const totalPairs = (hiddenRepresentations.length * (hiddenRepresentations.length - 1)) / 2;
  const diversityPercent = (differentRepresentations / totalPairs * 100).toFixed(1);
  
  console.log(`   –†–∞–∑–ª–∏—á–∞—é—â–∏—Ö—Å—è –ø–∞—Ä –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π: ${diversityPercent}%`);
  
  runner.assert(differentRepresentations > totalPairs * 0.3, 
    'RBM –¥–æ–ª–∂–Ω–∞ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–∫—Ä—ã—Ç—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ü–∏—Ñ—Ä');
});

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
runner.run().then(() => {
  console.log('\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MNIST –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
}).catch(error => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤:', error);
});